from parser import Netlist, parse_netlist
from typing import List
import os

TB_FILENAME = "generated/testbench.sv"

TB_HEADER_DEFINES = """
/**
 *
 * This testbench file is generated by NATHAN.
 * Do not modify the testbench manually.
 *
 */


`timescale 1ps/1ps
`define PS(ticks) (ticks * 1)
`define NS(ticks) (ticks * 1000)
"""

# TB_MODULE_DEFINES_GEN

TB_MODULE_DECL = """
module testbench();

    import "DPI-C" function int force_net_by_name_dpi(input string netname, input int value);
    import "DPI-C" function int release_net_by_name_dpi(input string netname);
    import "DPI-C" function int get_net_value_by_name_dpi(input string netname);
    integer fd;
"""

# TB_NET_NAMES_GEN

# TB_PORTLIST_GEN

# TB_DUT_DECL_GEN

# TB_RUN_TEST_GEN

TB_FOOTER = """
    initial begin
        fd = $fopen("output_gen/tb_output.txt", "w");

        for (int i = 0; i < `NUM_CYCLES; i++) begin
            run_test(net_names[i]);
        end

        $fclose(fd);
    end

endmodule
"""

def gen_testbench(netlist: Netlist, fault_nets: List[str], num_cycles: int):

    tb_module_defines_gen = ""
    tb_module_defines_gen += f"`define NUM_CYCLES {num_cycles}\n"

    tb_net_names_gen = ""
    tb_net_names_gen += "\tstring net_names[`NUM_CYCLES] = '{\n"
    for i in range(0, len(fault_nets)):
        tb_net_names_gen += f"\t\t\"dut.{fault_nets[i]}\""
        if i != (len(fault_nets) - 1):
            tb_net_names_gen += ","
        tb_net_names_gen += '\n'
    tb_net_names_gen += "\t};\n"

    tb_portlist_gen = ""
    tb_portlist_gen += "\n\t// Input Portlist\n"
    for input in netlist.inputs:
        tb_portlist_gen += f"\tlogic [{input[1]-1}:0] {input[0]};\n" 
    tb_portlist_gen += "\n\t// Output Portlist\n"
    for output in netlist.outputs:
        tb_portlist_gen += f"\tlogic [{output[1]-1}:0] {output[0]};\n" 
    tb_portlist_gen += "\n\t// Correct Output Variables for Validation\n" 
    for output in netlist.outputs:
        tb_portlist_gen += f"\tlogic [{output[1]-1}:0] {output[0]}_correct;\n" 

    tb_dut_decl_gen = ""
    tb_dut_decl_gen += f"\n\t{netlist.name} dut (\n"
    tb_dut_decl_gen += "\t\t// Inputs\n"
    io_ports = netlist.inputs + netlist.outputs
    for i in range(0, len(io_ports)):
        port_name = io_ports[i][0]
        tb_dut_decl_gen += f"\t\t.{port_name} ({port_name})"
        if i != (len(io_ports) - 1):
            tb_dut_decl_gen += ","
        tb_dut_decl_gen += '\n'
    tb_dut_decl_gen += "\t);\n"

    tb_run_test_gen = ""
    tb_run_test_gen += "\n\ttask run_test(input string net_name);\n"
    tb_run_test_gen += "\t\t//Drive Inputs\n"
    for input in netlist.inputs:
        tb_run_test_gen += f"\t\t{input[0]} = $urandom;\n"
    tb_run_test_gen += "\t\t#(`NS(5)) // allow values to propagate\n"
    tb_run_test_gen += "\t\t//acquire correct outputs\n"
    for output in netlist.outputs:
        tb_run_test_gen += f"\t\t{output[0]}_correct = {output[0]};\n"
    tb_run_test_gen += "\t\t//force bitflip\n"
    tb_run_test_gen += "\t\tforce_net_by_name_dpi(net_name, get_net_value_by_name_dpi(net_name));\n"
    tb_run_test_gen += "\t\t#(`NS(5)) // allow values to propagate\n"
    tb_run_test_gen += "\t\t//release the net\n"
    tb_run_test_gen += "\t\trelease_net_by_name_dpi(net_name);\n"
    tb_run_test_gen += "\tendtask\n"


    # build testbench string
    testbench_str = ""
    testbench_str += TB_HEADER_DEFINES
    testbench_str += tb_module_defines_gen
    testbench_str += TB_MODULE_DECL
    testbench_str += tb_net_names_gen
    testbench_str += tb_portlist_gen
    testbench_str += tb_dut_decl_gen
    testbench_str += tb_run_test_gen
    testbench_str += TB_FOOTER

    os.makedirs("generated", exist_ok=True)
    with open("generated/testbench.sv", "w") as f:
        f.write(testbench_str)

def test_main():
    netlists = parse_netlist("full_adder_64bit.vg")
    for module_name, netlist in netlists:
        gen_testbench(netlist, ["n272", "n273", "n274", "n275", "n276"], 5)

if __name__ == '__main__':
    test_main()