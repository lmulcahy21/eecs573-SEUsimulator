/**
 *
 * This testbench file is generated by NATHAN.
 * Do not modify the testbench manually.
 *
 */

`timescale 1ps/1ps
`define PS(ticks) (ticks * 1)
`define NS(ticks) (ticks * 1000)
`define NUM_FAULTS 10000
`define NUM_WIRES 503
`define CLOCK_PERIOD `NS(10)
`define T_SU `PS(50)
`define T_HD `PS(20)
`define TIMESTEP `PS(1)

module testbench();

    // backannotate modules with timing information
    initial $sdf_annotate("sdf/full_adder_64bit.syn.sdf", golden);
    initial $sdf_annotate("sdf/full_adder_64bit.syn.sdf", faulty);
    
    // DPI hooks for interacting with internal nets via name
    import "DPI-C" function int force_net_by_name_dpi(input string netname, input int value);
    import "DPI-C" function int release_net_by_name_dpi(input string netname);
    import "DPI-C" function int get_net_value_by_name_dpi(input string netname);

    // clock gen
    logic clock = 0;
    always begin
        #(`CLOCK_PERIOD / 2) clock = ~clock;
    end
    
    // dict of module net names which we are sampling from via index
    string net_names_dict[`NUM_WIRES] = '{
        "testbench.faulty.A[0]", "testbench.faulty.A[1]", "testbench.faulty.A[2]", "testbench.faulty.A[3]",
        "testbench.faulty.A[4]", "testbench.faulty.A[5]", "testbench.faulty.A[6]", "testbench.faulty.A[7]",
        "testbench.faulty.A[8]", "testbench.faulty.A[9]", "testbench.faulty.A[10]", "testbench.faulty.A[11]",
        "testbench.faulty.A[12]", "testbench.faulty.A[13]", "testbench.faulty.A[14]", "testbench.faulty.A[15]",
        "testbench.faulty.A[16]", "testbench.faulty.A[17]", "testbench.faulty.A[18]", "testbench.faulty.A[19]",
        "testbench.faulty.A[20]", "testbench.faulty.A[21]", "testbench.faulty.A[22]", "testbench.faulty.A[23]",
        "testbench.faulty.A[24]", "testbench.faulty.A[25]", "testbench.faulty.A[26]", "testbench.faulty.A[27]",
        "testbench.faulty.A[28]", "testbench.faulty.A[29]", "testbench.faulty.A[30]", "testbench.faulty.A[31]",
        "testbench.faulty.A[32]", "testbench.faulty.A[33]", "testbench.faulty.A[34]", "testbench.faulty.A[35]",
        "testbench.faulty.A[36]", "testbench.faulty.A[37]", "testbench.faulty.A[38]", "testbench.faulty.A[39]",
        "testbench.faulty.A[40]", "testbench.faulty.A[41]", "testbench.faulty.A[42]", "testbench.faulty.A[43]",
        "testbench.faulty.A[44]", "testbench.faulty.A[45]", "testbench.faulty.A[46]", "testbench.faulty.A[47]",
        "testbench.faulty.A[48]", "testbench.faulty.A[49]", "testbench.faulty.A[50]", "testbench.faulty.A[51]",
        "testbench.faulty.A[52]", "testbench.faulty.A[53]", "testbench.faulty.A[54]", "testbench.faulty.A[55]",
        "testbench.faulty.A[56]", "testbench.faulty.A[57]", "testbench.faulty.A[58]", "testbench.faulty.A[59]",
        "testbench.faulty.A[60]", "testbench.faulty.A[61]", "testbench.faulty.A[62]", "testbench.faulty.A[63]",
        "testbench.faulty.B[0]", "testbench.faulty.B[1]", "testbench.faulty.B[2]", "testbench.faulty.B[3]",
        "testbench.faulty.B[4]", "testbench.faulty.B[5]", "testbench.faulty.B[6]", "testbench.faulty.B[7]",
        "testbench.faulty.B[8]", "testbench.faulty.B[9]", "testbench.faulty.B[10]", "testbench.faulty.B[11]",
        "testbench.faulty.B[12]", "testbench.faulty.B[13]", "testbench.faulty.B[14]", "testbench.faulty.B[15]",
        "testbench.faulty.B[16]", "testbench.faulty.B[17]", "testbench.faulty.B[18]", "testbench.faulty.B[19]",
        "testbench.faulty.B[20]", "testbench.faulty.B[21]", "testbench.faulty.B[22]", "testbench.faulty.B[23]",
        "testbench.faulty.B[24]", "testbench.faulty.B[25]", "testbench.faulty.B[26]", "testbench.faulty.B[27]",
        "testbench.faulty.B[28]", "testbench.faulty.B[29]", "testbench.faulty.B[30]", "testbench.faulty.B[31]",
        "testbench.faulty.B[32]", "testbench.faulty.B[33]", "testbench.faulty.B[34]", "testbench.faulty.B[35]",
        "testbench.faulty.B[36]", "testbench.faulty.B[37]", "testbench.faulty.B[38]", "testbench.faulty.B[39]",
        "testbench.faulty.B[40]", "testbench.faulty.B[41]", "testbench.faulty.B[42]", "testbench.faulty.B[43]",
        "testbench.faulty.B[44]", "testbench.faulty.B[45]", "testbench.faulty.B[46]", "testbench.faulty.B[47]",
        "testbench.faulty.B[48]", "testbench.faulty.B[49]", "testbench.faulty.B[50]", "testbench.faulty.B[51]",
        "testbench.faulty.B[52]", "testbench.faulty.B[53]", "testbench.faulty.B[54]", "testbench.faulty.B[55]",
        "testbench.faulty.B[56]", "testbench.faulty.B[57]", "testbench.faulty.B[58]", "testbench.faulty.B[59]",
        "testbench.faulty.B[60]", "testbench.faulty.B[61]", "testbench.faulty.B[62]", "testbench.faulty.B[63]",
        "testbench.faulty.S[0]", "testbench.faulty.S[1]", "testbench.faulty.S[2]", "testbench.faulty.S[3]",
        "testbench.faulty.S[4]", "testbench.faulty.S[5]", "testbench.faulty.S[6]", "testbench.faulty.S[7]",
        "testbench.faulty.S[8]", "testbench.faulty.S[9]", "testbench.faulty.S[10]", "testbench.faulty.S[11]",
        "testbench.faulty.S[12]", "testbench.faulty.S[13]", "testbench.faulty.S[14]", "testbench.faulty.S[15]",
        "testbench.faulty.S[16]", "testbench.faulty.S[17]", "testbench.faulty.S[18]", "testbench.faulty.S[19]",
        "testbench.faulty.S[20]", "testbench.faulty.S[21]", "testbench.faulty.S[22]", "testbench.faulty.S[23]",
        "testbench.faulty.S[24]", "testbench.faulty.S[25]", "testbench.faulty.S[26]", "testbench.faulty.S[27]",
        "testbench.faulty.S[28]", "testbench.faulty.S[29]", "testbench.faulty.S[30]", "testbench.faulty.S[31]",
        "testbench.faulty.S[32]", "testbench.faulty.S[33]", "testbench.faulty.S[34]", "testbench.faulty.S[35]",
        "testbench.faulty.S[36]", "testbench.faulty.S[37]", "testbench.faulty.S[38]", "testbench.faulty.S[39]",
        "testbench.faulty.S[40]", "testbench.faulty.S[41]", "testbench.faulty.S[42]", "testbench.faulty.S[43]",
        "testbench.faulty.S[44]", "testbench.faulty.S[45]", "testbench.faulty.S[46]", "testbench.faulty.S[47]",
        "testbench.faulty.S[48]", "testbench.faulty.S[49]", "testbench.faulty.S[50]", "testbench.faulty.S[51]",
        "testbench.faulty.S[52]", "testbench.faulty.S[53]", "testbench.faulty.S[54]", "testbench.faulty.S[55]",
        "testbench.faulty.S[56]", "testbench.faulty.S[57]", "testbench.faulty.S[58]", "testbench.faulty.S[59]",
        "testbench.faulty.S[60]", "testbench.faulty.S[61]", "testbench.faulty.S[62]", "testbench.faulty.S[63]",
        "testbench.faulty.carry_in", "testbench.faulty.carry_out", "testbench.faulty.n192",
        "testbench.faulty.n193", "testbench.faulty.n194", "testbench.faulty.n195", "testbench.faulty.n196",
        "testbench.faulty.n197", "testbench.faulty.n198", "testbench.faulty.n199", "testbench.faulty.n200",
        "testbench.faulty.n201", "testbench.faulty.n202", "testbench.faulty.n203", "testbench.faulty.n204",
        "testbench.faulty.n205", "testbench.faulty.n206", "testbench.faulty.n207", "testbench.faulty.n208",
        "testbench.faulty.n209", "testbench.faulty.n213", "testbench.faulty.n214", "testbench.faulty.n215",
        "testbench.faulty.n216", "testbench.faulty.n217", "testbench.faulty.n218", "testbench.faulty.n219",
        "testbench.faulty.n220", "testbench.faulty.n221", "testbench.faulty.n222", "testbench.faulty.n223",
        "testbench.faulty.n224", "testbench.faulty.n225", "testbench.faulty.n226", "testbench.faulty.n227",
        "testbench.faulty.n228", "testbench.faulty.n229", "testbench.faulty.n230", "testbench.faulty.n231",
        "testbench.faulty.n232", "testbench.faulty.n233", "testbench.faulty.n234", "testbench.faulty.n235",
        "testbench.faulty.n236", "testbench.faulty.n237", "testbench.faulty.n238", "testbench.faulty.n239",
        "testbench.faulty.n240", "testbench.faulty.n241", "testbench.faulty.n242", "testbench.faulty.n243",
        "testbench.faulty.n244", "testbench.faulty.n245", "testbench.faulty.n246", "testbench.faulty.n247",
        "testbench.faulty.n248", "testbench.faulty.n249", "testbench.faulty.n250", "testbench.faulty.n251",
        "testbench.faulty.n252", "testbench.faulty.n253", "testbench.faulty.n254", "testbench.faulty.n255",
        "testbench.faulty.n256", "testbench.faulty.n257", "testbench.faulty.n258", "testbench.faulty.n259",
        "testbench.faulty.n260", "testbench.faulty.n261", "testbench.faulty.n262", "testbench.faulty.n263",
        "testbench.faulty.n264", "testbench.faulty.n265", "testbench.faulty.n266", "testbench.faulty.n267",
        "testbench.faulty.n268", "testbench.faulty.n269", "testbench.faulty.n270", "testbench.faulty.n271",
        "testbench.faulty.n272", "testbench.faulty.n273", "testbench.faulty.n274", "testbench.faulty.n275",
        "testbench.faulty.n276", "testbench.faulty.n277", "testbench.faulty.n278", "testbench.faulty.n279",
        "testbench.faulty.n280", "testbench.faulty.n281", "testbench.faulty.n282", "testbench.faulty.n283",
        "testbench.faulty.n284", "testbench.faulty.n285", "testbench.faulty.n286", "testbench.faulty.n287",
        "testbench.faulty.n288", "testbench.faulty.n289", "testbench.faulty.n290", "testbench.faulty.n291",
        "testbench.faulty.n292", "testbench.faulty.n293", "testbench.faulty.n294", "testbench.faulty.n295",
        "testbench.faulty.n296", "testbench.faulty.n297", "testbench.faulty.n298", "testbench.faulty.n299",
        "testbench.faulty.n300", "testbench.faulty.n301", "testbench.faulty.n302", "testbench.faulty.n303",
        "testbench.faulty.n304", "testbench.faulty.n305", "testbench.faulty.n306", "testbench.faulty.n307",
        "testbench.faulty.n308", "testbench.faulty.n309", "testbench.faulty.n310", "testbench.faulty.n311",
        "testbench.faulty.n312", "testbench.faulty.n313", "testbench.faulty.n314", "testbench.faulty.n315",
        "testbench.faulty.n316", "testbench.faulty.n317", "testbench.faulty.n318", "testbench.faulty.n319",
        "testbench.faulty.n320", "testbench.faulty.n321", "testbench.faulty.n322", "testbench.faulty.n323",
        "testbench.faulty.n324", "testbench.faulty.n325", "testbench.faulty.n326", "testbench.faulty.n327",
        "testbench.faulty.n328", "testbench.faulty.n329", "testbench.faulty.n330", "testbench.faulty.n331",
        "testbench.faulty.n332", "testbench.faulty.n333", "testbench.faulty.n334", "testbench.faulty.n335",
        "testbench.faulty.n336", "testbench.faulty.n337", "testbench.faulty.n338", "testbench.faulty.n339",
        "testbench.faulty.n340", "testbench.faulty.n341", "testbench.faulty.n342", "testbench.faulty.n343",
        "testbench.faulty.n344", "testbench.faulty.n345", "testbench.faulty.n346", "testbench.faulty.n347",
        "testbench.faulty.n348", "testbench.faulty.n349", "testbench.faulty.n350", "testbench.faulty.n351",
        "testbench.faulty.n352", "testbench.faulty.n353", "testbench.faulty.n354", "testbench.faulty.n355",
        "testbench.faulty.n356", "testbench.faulty.n357", "testbench.faulty.n358", "testbench.faulty.n359",
        "testbench.faulty.n360", "testbench.faulty.n361", "testbench.faulty.n362", "testbench.faulty.n363",
        "testbench.faulty.n364", "testbench.faulty.n365", "testbench.faulty.n366", "testbench.faulty.n367",
        "testbench.faulty.n368", "testbench.faulty.n369", "testbench.faulty.n370", "testbench.faulty.n371",
        "testbench.faulty.n372", "testbench.faulty.n373", "testbench.faulty.n374", "testbench.faulty.n375",
        "testbench.faulty.n376", "testbench.faulty.n377", "testbench.faulty.n378", "testbench.faulty.n379",
        "testbench.faulty.n380", "testbench.faulty.n381", "testbench.faulty.n382", "testbench.faulty.n383",
        "testbench.faulty.n384", "testbench.faulty.n385", "testbench.faulty.n386", "testbench.faulty.n387",
        "testbench.faulty.n388", "testbench.faulty.n389", "testbench.faulty.n390", "testbench.faulty.n391",
        "testbench.faulty.n392", "testbench.faulty.n393", "testbench.faulty.n394", "testbench.faulty.n395",
        "testbench.faulty.n396", "testbench.faulty.n397", "testbench.faulty.n398", "testbench.faulty.n399",
        "testbench.faulty.n400", "testbench.faulty.n401", "testbench.faulty.n402", "testbench.faulty.n403",
        "testbench.faulty.n404", "testbench.faulty.n405", "testbench.faulty.n406", "testbench.faulty.n407",
        "testbench.faulty.n408", "testbench.faulty.n409", "testbench.faulty.n410", "testbench.faulty.n411",
        "testbench.faulty.n412", "testbench.faulty.n413", "testbench.faulty.n414", "testbench.faulty.n415",
        "testbench.faulty.n416", "testbench.faulty.n417", "testbench.faulty.n418", "testbench.faulty.n419",
        "testbench.faulty.n420", "testbench.faulty.n421", "testbench.faulty.n422", "testbench.faulty.n423",
        "testbench.faulty.n424", "testbench.faulty.n425", "testbench.faulty.n426", "testbench.faulty.n427",
        "testbench.faulty.n428", "testbench.faulty.n429", "testbench.faulty.n430", "testbench.faulty.n431",
        "testbench.faulty.n432", "testbench.faulty.n433", "testbench.faulty.n434", "testbench.faulty.n435",
        "testbench.faulty.n436", "testbench.faulty.n437", "testbench.faulty.n438", "testbench.faulty.n439",
        "testbench.faulty.n440", "testbench.faulty.n441", "testbench.faulty.n442", "testbench.faulty.n443",
        "testbench.faulty.n444", "testbench.faulty.n445", "testbench.faulty.n446", "testbench.faulty.n447",
        "testbench.faulty.n448", "testbench.faulty.n449", "testbench.faulty.n450", "testbench.faulty.n451",
        "testbench.faulty.n452", "testbench.faulty.n453", "testbench.faulty.n454", "testbench.faulty.n455",
        "testbench.faulty.n456", "testbench.faulty.n457", "testbench.faulty.n458", "testbench.faulty.n459",
        "testbench.faulty.n460", "testbench.faulty.n461", "testbench.faulty.n462", "testbench.faulty.n463",
        "testbench.faulty.n464", "testbench.faulty.n4testbench_str65", "testbench.faulty.n466", "testbench.faulty.n467",
        "testbench.faulty.n468", "testbench.faulty.n469", "testbench.faulty.n470", "testbench.faulty.n471",
        "testbench.faulty.n472", "testbench.faulty.n473", "testbench.faulty.n474", "testbench.faulty.n475",
        "testbench.faulty.n476", "testbench.faulty.n477", "testbench.faulty.n478", "testbench.faulty.n479",
        "testbench.faulty.n480", "testbench.faulty.n481", "testbench.faulty.n482", "testbench.faulty.n483",
        "testbench.faulty.n484", "testbench.faulty.n485", "testbench.faulty.n486", "testbench.faulty.n487",
        "testbench.faulty.n488", "testbench.faulty.n489", "testbench.faulty.n490", "testbench.faulty.n491",
        "testbench.faulty.n492", "testbench.faulty.n493", "testbench.faulty.n494", "testbench.faulty.n495",
        "testbench.faulty.n496", "testbench.faulty.n497", "testbench.faulty.n498", "testbench.faulty.n499",
        "testbench.faulty.n500", "testbench.faulty.n501", "testbench.faulty.n502", "testbench.faulty.n503"};

    // Input Portlist
    // TODO interfaces?
	logic [63:0] A;
	logic [63:0] B;
	logic [0:0] carry_in;

	// Output Portlist (golden)
	logic [63:0] S_golden;
	logic [0:0] carry_out_golden;

    // Output Portlist (Faulty)
    logic [63:0] S_faulty;
	logic [0:0] carry_out_faulty;

    // fault free (golden) model
    full_adder_64bit golden (
		// Inputs
		.A (A),
		.B (B),
		.carry_in (carry_in),
        // Outputs
		.S (S_golden),
		.carry_out (carry_out_golden)
	);

    // faulty model which will be subjected to faults
    full_adder_64bit faulty ( 
		// Inputs
		.A (A),
		.B (B),
		.carry_in (carry_in),
		// Outputs
        .S (S_faulty),
		.carry_out (carry_out_faulty)
	);

    // is there a difference between the two module outputs
    logic diff;
    assign diff = S_faulty != S_golden ||
		carry_out_faulty != carry_out_golden;

    // seed
    int seed = 42;

    // Statistic counters maintained throughout campaign
    int  masked_timing = 0;   // 1) timing‑masked (between hold & setup)
    int  meta_hit      = 0;   // 2) setup/hold violation --> metastability
    int  masked_logic  = 0;   // 3) logic‑masked (fault crosses clock edge but doesn't have observable effects)
    int  observed      = 0;   // 4) captured & visible

    // intermediate variables
    int          sampled_idx;
    int          fault_start;
    int          fault_width; 
    time         fault_end;   
    logic        metastable; 
    logic        diverged;   
    time         edge_now;
    time         edge_next;
    time         hd_period_end;
    time         su_period_start; 
    time         last_diff;
    logic        is_timing_masked;
    logic [63:0] S_faulty_old;
    logic [0:0]  carry_out_faulty_old;
    string       net_name;

    // fault injection campaign
    initial begin

        for (int i = 0; i < `NUM_FAULTS; i++) begin
            // sample a net from the netlist
            sampled_idx = $dist_uniform(seed, 0, `NUM_WIRES - 1);
            net_name = net_names_dict[sampled_idx];
            
            // sample timing parameters for the pulse
            fault_start = $dist_uniform(seed, 0, `CLOCK_PERIOD - 1);
            fault_width = $dist_normal(seed, `PS(55), `PS(15));
            if (fault_width < 0) fault_width = 0;

            // random inputs
            @(posedge clock);
            assert(std::randomize(A));
            assert(std::randomize(B));
            assert(std::randomize(carry_in));

            // fault modeling routine
            @(posedge clock)
            fork
                //----- 1) inject the bit‑flip ---------------------------------------
                begin
                    #`PS(fault_start);
                    force_net_by_name_dpi(net_name, ~get_net_value_by_name_dpi(net_name));
                    #`PS(fault_width);
                    release_net_by_name_dpi(net_name);
                end

                //----- 2) watch outputs until next +edge ----------------------------
                begin
                    edge_now   = $time; // current rising edge
                    edge_next  = edge_now + `CLOCK_PERIOD;
                    hd_period_end = edge_now + `T_HD;
                    su_period_start = edge_next - `T_SU;

                    last_diff = 0;
                    metastable = 0;
                    diverged = 0;

                    // check for any divergence BEFORE the edge
                    while ($time < hd_period_end) begin
                        #(`TIMESTEP)
                        if (diff) begin
                            metastable = 1;
                            diverged = 1;
                            last_diff = $time;
                        end
                    end 


                    while ($time < su_period_start) begin
                        #(`TIMESTEP)
                        if (diff) begin
                            diverged = 1;
                            last_diff = $time;
                        end
                    end

                    S_faulty_old = S_faulty;
                    carry_out_faulty_old = carry_out_faulty;

                    while ($time < (edge_next - 1)) begin  
                        #(`TIMESTEP)
                        if (diff) begin
                            last_diff = $time;
                            diverged = 1;
                        end
                        if ((S_faulty != S_faulty_old) || (carry_out_faulty != carry_out_faulty_old)) begin 
                            metastable = 1;
                        end
                    end 


                    @(posedge clock);
                    S_faulty_old = S_faulty;
                    carry_out_faulty_old = carry_out_faulty;

                    edge_now = $time;
                    while ($time < (edge_now + `T_HD)) begin
                        #(`TIMESTEP)
                        if (diff) begin
                            last_diff = $time;
                            diverged = 1;
                        end
                        if ((S_faulty != S_faulty_old) || (carry_out_faulty != carry_out_faulty_old)) begin
                            //$display("S_faulty: %h, S_faulty_old: %h", S_faulty, S_faulty_old); 
                            metastable = 1;
                        end
                    end
                end
            join

            is_timing_masked = 0;

            if (metastable) meta_hit++;
            if (!diverged)  masked_logic++;
            if (!metastable && diverged && (last_diff < (edge_now - `T_SU))) begin 
                masked_timing++;  // never reached sampling FF
                is_timing_masked = 1;
            end
            if (!metastable && diverged && !is_timing_masked) observed++; 
        end

        // print summary
        $display("\n-----  fault‑injection summary (%0d trials) -----", `NUM_FAULTS);
        $display("1) timing‑masked        : %0d", masked_timing);
        $display("2) setup/hold violation : %0d", meta_hit);
        $display("3) logic‑masked         : %0d", masked_logic);
        $display("4) observed             : %0d", observed);
        $finish;
    end

endmodule