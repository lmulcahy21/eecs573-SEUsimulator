/**
 *
 * This testbench file is generated by NATHAN.
 * Do not modify the testbench manually.
 *
 */


`timescale 1ps/1ps
`define PS(ticks) (ticks * 1)
`define NS(ticks) (ticks * 1000)

// BEGIN GENERATED
`define NUM_CYCLES 50000
// END GENERATED

module testbench();

    import "DPI-C" function int force_net_by_name_dpi(input string netname, input int value);
    import "DPI-C" function int release_net_by_name_dpi(input string netname);
    import "DPI-C" function int get_net_value_by_name_dpi(input string netname);
    integer fd;

    // BEGIN GENERATED
    string net_names[NUM_WIRES]
    int net_idx[NUM_CYCLES] = '{
        0, 1, 2, 3, 4,
        // ...
    };
    string net_names[NUM_CYCLES] = '{
        "dut.sampled_net1",
        "dut.sampled_net2",
        // ...
    };
    // END GENERATED

    // BEGIN GENERATED
    // input portlist
    logic [63:0] A;
    logic [63:0] B;
    logic        carry_in;

    // output portlist
    logic [63:0] S;
    logic        carry_out;

    // correct outputs for validation
    logic [63:0] S_correct;
    logic        carry_out_correct;

    // module instantiation
    rca dut (
        // inputs
        .A       (A),
        .B       (B),
        .carry_in(carry_in),

        // outputs
        .S        (S),
        .carry_out(carry_out)
    );
    // END GENERATED

    // BEGIN GENERATED
    task run_test(input string net_name);
        // drive inputs
        A = $urandom;
        B = $urandom;
        carry_in = $urandom;

        #(`NS(5)) // allow values to propagate
        // acquire correct outputs
        S_correct = S;
        carry_out_correct = carry_out;

        // force bitflip
        force_net_by_name_dpi(net_name, get_net_value_by_name_dpi(net_name));

        #(`NS(5)) // allow values to propagate

        // check the outputs
        $fwrite("FAULT %d", idx);
        $fwrite("input_A:%d\t", A);
        $fwrite("input_B:%d\t", B);
        $fwrite("input_carry_in:%d\t", carry_in);
        $fwrite("\n");
        $fwrite("correct_output_S:%d\t",S_correct);
        $fwrite("correct_output_carry_out:%d\t",carry_out_correct);
        $fwrite("\n");
        $fwrite("output_S:%d\t", S);
        $fwrite("output_carry_out:%d\t", carry_out);
        $fwrite("\n");

        // release the net
        release_net_by_name_dpi(net_name);
        #(`NS(5)) // let it settle


    endtask
    // END GENERATED

    initial begin
        fd = $fopen("output_gen/tb_output.txt", "w");

        for (int i = 0; i < `NUM_CYCLES; i++) begin
            run_test(net_names[i]);
        end

        $fclose(fd);
    end

endmodule